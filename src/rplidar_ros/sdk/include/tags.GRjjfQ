RPLIDAR_SDK_VERSION	rplidar.h	44;"	d
RPLIDAR_CMD_STOP	rplidar_cmd.h	43;"	d
RPLIDAR_CMD_SCAN	rplidar_cmd.h	44;"	d
RPLIDAR_CMD_FORCE_SCAN	rplidar_cmd.h	45;"	d
RPLIDAR_CMD_RESET	rplidar_cmd.h	46;"	d
RPLIDAR_CMD_GET_DEVICE_INFO	rplidar_cmd.h	50;"	d
RPLIDAR_CMD_GET_DEVICE_HEALTH	rplidar_cmd.h	51;"	d
RPLIDAR_CMD_GET_SAMPLERATE	rplidar_cmd.h	53;"	d
RPLIDAR_CMD_HQ_MOTOR_SPEED_CTRL	rplidar_cmd.h	55;"	d
RPLIDAR_CMD_EXPRESS_SCAN	rplidar_cmd.h	58;"	d
RPLIDAR_CMD_HQ_SCAN	rplidar_cmd.h	59;"	d
RPLIDAR_CMD_GET_LIDAR_CONF	rplidar_cmd.h	60;"	d
RPLIDAR_CMD_SET_LIDAR_CONF	rplidar_cmd.h	61;"	d
RPLIDAR_CMD_SET_MOTOR_PWM	rplidar_cmd.h	63;"	d
RPLIDAR_CMD_GET_ACC_BOARD_FLAG	rplidar_cmd.h	64;"	d
RPLIDAR_EXPRESS_SCAN_MODE_NORMAL	rplidar_cmd.h	73;"	d
RPLIDAR_EXPRESS_SCAN_MODE_FIXANGLE	rplidar_cmd.h	74;"	d
RPLIDAR_EXPRESS_SCAN_FLAG_BOOST	rplidar_cmd.h	76;"	d
RPLIDAR_EXPRESS_SCAN_FLAG_SUNLIGHT_REJECTION	rplidar_cmd.h	77;"	d
RPLIDAR_ULTRAEXPRESS_SCAN_FLAG_STD	rplidar_cmd.h	80;"	d
RPLIDAR_ULTRAEXPRESS_SCAN_FLAG_HIGH_SENSITIVITY	rplidar_cmd.h	81;"	d
RPLIDAR_HQ_SCAN_FLAG_CCW	rplidar_cmd.h	83;"	d
RPLIDAR_HQ_SCAN_FLAG_RAW_ENCODER	rplidar_cmd.h	84;"	d
RPLIDAR_HQ_SCAN_FLAG_RAW_DISTANCE	rplidar_cmd.h	85;"	d
_rplidar_payload_express_scan_t	rplidar_cmd.h	/^typedef struct _rplidar_payload_express_scan_t {$/;"	s
working_mode	rplidar_cmd.h	/^    _u8   working_mode;$/;"	m	struct:_rplidar_payload_express_scan_t
working_flags	rplidar_cmd.h	/^    _u16  working_flags;$/;"	m	struct:_rplidar_payload_express_scan_t
param	rplidar_cmd.h	/^    _u16  param;$/;"	m	struct:_rplidar_payload_express_scan_t
rplidar_payload_express_scan_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_express_scan_t;$/;"	t	typeref:struct:_rplidar_payload_express_scan_t
_rplidar_payload_hq_scan_t	rplidar_cmd.h	/^typedef struct _rplidar_payload_hq_scan_t {$/;"	s
flag	rplidar_cmd.h	/^    _u8  flag;$/;"	m	struct:_rplidar_payload_hq_scan_t
reserved	rplidar_cmd.h	/^    _u8   reserved[32];$/;"	m	struct:_rplidar_payload_hq_scan_t
rplidar_payload_hq_scan_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_hq_scan_t;$/;"	t	typeref:struct:_rplidar_payload_hq_scan_t
_rplidar_payload_get_scan_conf_t	rplidar_cmd.h	/^typedef struct _rplidar_payload_get_scan_conf_t {$/;"	s
type	rplidar_cmd.h	/^    _u32  type;$/;"	m	struct:_rplidar_payload_get_scan_conf_t
reserved	rplidar_cmd.h	/^    _u8   reserved[32];$/;"	m	struct:_rplidar_payload_get_scan_conf_t
rplidar_payload_get_scan_conf_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_get_scan_conf_t;$/;"	t	typeref:struct:_rplidar_payload_get_scan_conf_t
MAX_MOTOR_PWM	rplidar_cmd.h	102;"	d
DEFAULT_MOTOR_PWM	rplidar_cmd.h	103;"	d
_rplidar_payload_motor_pwm_t	rplidar_cmd.h	/^typedef struct _rplidar_payload_motor_pwm_t {$/;"	s
pwm_value	rplidar_cmd.h	/^    _u16 pwm_value;$/;"	m	struct:_rplidar_payload_motor_pwm_t
rplidar_payload_motor_pwm_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_motor_pwm_t;$/;"	t	typeref:struct:_rplidar_payload_motor_pwm_t
_rplidar_payload_acc_board_flag_t	rplidar_cmd.h	/^typedef struct _rplidar_payload_acc_board_flag_t {$/;"	s
reserved	rplidar_cmd.h	/^    _u32 reserved;$/;"	m	struct:_rplidar_payload_acc_board_flag_t
rplidar_payload_acc_board_flag_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_payload_acc_board_flag_t
RPLIDAR_ANS_TYPE_DEVINFO	rplidar_cmd.h	114;"	d
RPLIDAR_ANS_TYPE_DEVHEALTH	rplidar_cmd.h	115;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT	rplidar_cmd.h	117;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED	rplidar_cmd.h	119;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_HQ	rplidar_cmd.h	120;"	d
RPLIDAR_ANS_TYPE_SAMPLE_RATE	rplidar_cmd.h	124;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED_ULTRA	rplidar_cmd.h	126;"	d
RPLIDAR_ANS_TYPE_GET_LIDAR_CONF	rplidar_cmd.h	128;"	d
RPLIDAR_ANS_TYPE_SET_LIDAR_CONF	rplidar_cmd.h	129;"	d
RPLIDAR_ANS_TYPE_ACC_BOARD_FLAG	rplidar_cmd.h	131;"	d
RPLIDAR_RESP_ACC_BOARD_FLAG_MOTOR_CTRL_SUPPORT_MASK	rplidar_cmd.h	133;"	d
_rplidar_response_acc_board_flag_t	rplidar_cmd.h	/^typedef struct _rplidar_response_acc_board_flag_t {$/;"	s
support_flag	rplidar_cmd.h	/^    _u32 support_flag;$/;"	m	struct:_rplidar_response_acc_board_flag_t
rplidar_response_acc_board_flag_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_response_acc_board_flag_t
RPLIDAR_STATUS_OK	rplidar_cmd.h	139;"	d
RPLIDAR_STATUS_WARNING	rplidar_cmd.h	140;"	d
RPLIDAR_STATUS_ERROR	rplidar_cmd.h	141;"	d
RPLIDAR_RESP_MEASUREMENT_SYNCBIT	rplidar_cmd.h	143;"	d
RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT	rplidar_cmd.h	144;"	d
RPLIDAR_RESP_HQ_FLAG_SYNCBIT	rplidar_cmd.h	146;"	d
RPLIDAR_RESP_MEASUREMENT_CHECKBIT	rplidar_cmd.h	148;"	d
RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT	rplidar_cmd.h	149;"	d
_rplidar_response_sample_rate_t	rplidar_cmd.h	/^typedef struct _rplidar_response_sample_rate_t {$/;"	s
std_sample_duration_us	rplidar_cmd.h	/^    _u16  std_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
express_sample_duration_us	rplidar_cmd.h	/^    _u16  express_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
rplidar_response_sample_rate_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_sample_rate_t;$/;"	t	typeref:struct:_rplidar_response_sample_rate_t
_rplidar_response_measurement_node_t	rplidar_cmd.h	/^typedef struct _rplidar_response_measurement_node_t {$/;"	s
sync_quality	rplidar_cmd.h	/^    _u8    sync_quality;      \/\/ syncbit:1;syncbit_inverse:1;quality:6;$/;"	m	struct:_rplidar_response_measurement_node_t
angle_q6_checkbit	rplidar_cmd.h	/^    _u16   angle_q6_checkbit; \/\/ check_bit:1;angle_q6:15;$/;"	m	struct:_rplidar_response_measurement_node_t
distance_q2	rplidar_cmd.h	/^    _u16   distance_q2;$/;"	m	struct:_rplidar_response_measurement_node_t
rplidar_response_measurement_node_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_measurement_node_t;$/;"	t	typeref:struct:_rplidar_response_measurement_node_t
RPLIDAR_RESP_MEASUREMENT_EXP_ANGLE_MASK	rplidar_cmd.h	163;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_DISTANCE_MASK	rplidar_cmd.h	164;"	d
_rplidar_response_cabin_nodes_t	rplidar_cmd.h	/^typedef struct _rplidar_response_cabin_nodes_t {$/;"	s
distance_angle_1	rplidar_cmd.h	/^    _u16   distance_angle_1; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_angle_2	rplidar_cmd.h	/^    _u16   distance_angle_2; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
offset_angles_q3	rplidar_cmd.h	/^    _u8    offset_angles_q3;  $/;"	m	struct:_rplidar_response_cabin_nodes_t
rplidar_response_cabin_nodes_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_cabin_nodes_t;   $/;"	t	typeref:struct:_rplidar_response_cabin_nodes_t
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_1	rplidar_cmd.h	173;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_2	rplidar_cmd.h	174;"	d
RPLIDAR_RESP_MEASUREMENT_HQ_SYNC	rplidar_cmd.h	176;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNCBIT	rplidar_cmd.h	178;"	d
_rplidar_response_capsule_measurement_nodes_t	rplidar_cmd.h	/^typedef struct _rplidar_response_capsule_measurement_nodes_t {$/;"	s
s_checksum_1	rplidar_cmd.h	/^    _u8                             s_checksum_1; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
s_checksum_2	rplidar_cmd.h	/^    _u8                             s_checksum_2; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
start_angle_sync_q6	rplidar_cmd.h	/^    _u16                            start_angle_sync_q6;$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
cabins	rplidar_cmd.h	/^    rplidar_response_cabin_nodes_t  cabins[16];$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
rplidar_response_capsule_measurement_nodes_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_capsule_measurement_nodes_t
RPLIDAR_RESP_MEASUREMENT_EXP_ULTRA_MAJOR_BITS	rplidar_cmd.h	188;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_ULTRA_PREDICT_BITS	rplidar_cmd.h	189;"	d
_rplidar_response_ultra_cabin_nodes_t	rplidar_cmd.h	/^typedef struct _rplidar_response_ultra_cabin_nodes_t {$/;"	s
combined_x3	rplidar_cmd.h	/^    _u32 combined_x3;$/;"	m	struct:_rplidar_response_ultra_cabin_nodes_t
rplidar_response_ultra_cabin_nodes_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_ultra_cabin_nodes_t;  $/;"	t	typeref:struct:_rplidar_response_ultra_cabin_nodes_t
_rplidar_response_ultra_capsule_measurement_nodes_t	rplidar_cmd.h	/^typedef struct _rplidar_response_ultra_capsule_measurement_nodes_t {$/;"	s
s_checksum_1	rplidar_cmd.h	/^    _u8                             s_checksum_1; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
s_checksum_2	rplidar_cmd.h	/^    _u8                             s_checksum_2; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
start_angle_sync_q6	rplidar_cmd.h	/^    _u16                            start_angle_sync_q6;$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
ultra_cabins	rplidar_cmd.h	/^    rplidar_response_ultra_cabin_nodes_t  ultra_cabins[32];$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
rplidar_response_ultra_capsule_measurement_nodes_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_ultra_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_ultra_capsule_measurement_nodes_t
rplidar_response_measurement_node_hq_t	rplidar_cmd.h	/^typedef struct rplidar_response_measurement_node_hq_t {$/;"	s
angle_z_q14	rplidar_cmd.h	/^    _u16   angle_z_q14; $/;"	m	struct:rplidar_response_measurement_node_hq_t
dist_mm_q2	rplidar_cmd.h	/^    _u32   dist_mm_q2; $/;"	m	struct:rplidar_response_measurement_node_hq_t
quality	rplidar_cmd.h	/^    _u8    quality;  $/;"	m	struct:rplidar_response_measurement_node_hq_t
flag	rplidar_cmd.h	/^    _u8    flag;$/;"	m	struct:rplidar_response_measurement_node_hq_t
rplidar_response_measurement_node_hq_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_measurement_node_hq_t;$/;"	t	typeref:struct:rplidar_response_measurement_node_hq_t
_rplidar_response_hq_capsule_measurement_nodes_t	rplidar_cmd.h	/^typedef struct _rplidar_response_hq_capsule_measurement_nodes_t{$/;"	s
sync_byte	rplidar_cmd.h	/^    _u8 sync_byte;$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
time_stamp	rplidar_cmd.h	/^    _u64 time_stamp;$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
node_hq	rplidar_cmd.h	/^    rplidar_response_measurement_node_hq_t node_hq[16];$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
crc32	rplidar_cmd.h	/^    _u32  crc32;$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
rplidar_response_hq_capsule_measurement_nodes_t	rplidar_cmd.h	/^}__attribute__((packed)) rplidar_response_hq_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_hq_capsule_measurement_nodes_t
RPLIDAR_CONF_SCAN_COMMAND_STD	rplidar_cmd.h	219;"	d
RPLIDAR_CONF_SCAN_COMMAND_EXPRESS	rplidar_cmd.h	220;"	d
RPLIDAR_CONF_SCAN_COMMAND_HQ	rplidar_cmd.h	221;"	d
RPLIDAR_CONF_SCAN_COMMAND_BOOST	rplidar_cmd.h	222;"	d
RPLIDAR_CONF_SCAN_COMMAND_STABILITY	rplidar_cmd.h	223;"	d
RPLIDAR_CONF_SCAN_COMMAND_SENSITIVITY	rplidar_cmd.h	224;"	d
RPLIDAR_CONF_ANGLE_RANGE	rplidar_cmd.h	226;"	d
RPLIDAR_CONF_DESIRED_ROT_FREQ	rplidar_cmd.h	227;"	d
RPLIDAR_CONF_SCAN_COMMAND_BITMAP	rplidar_cmd.h	228;"	d
RPLIDAR_CONF_MIN_ROT_FREQ	rplidar_cmd.h	229;"	d
RPLIDAR_CONF_MAX_ROT_FREQ	rplidar_cmd.h	230;"	d
RPLIDAR_CONF_MAX_DISTANCE	rplidar_cmd.h	231;"	d
RPLIDAR_CONF_SCAN_MODE_COUNT	rplidar_cmd.h	233;"	d
RPLIDAR_CONF_SCAN_MODE_US_PER_SAMPLE	rplidar_cmd.h	234;"	d
RPLIDAR_CONF_SCAN_MODE_MAX_DISTANCE	rplidar_cmd.h	235;"	d
RPLIDAR_CONF_SCAN_MODE_ANS_TYPE	rplidar_cmd.h	236;"	d
RPLIDAR_CONF_SCAN_MODE_TYPICAL	rplidar_cmd.h	237;"	d
RPLIDAR_CONF_SCAN_MODE_NAME	rplidar_cmd.h	238;"	d
RPLIDAR_EXPRESS_SCAN_STABILITY_BITMAP	rplidar_cmd.h	239;"	d
RPLIDAR_EXPRESS_SCAN_SENSITIVITY_BITMAP	rplidar_cmd.h	240;"	d
_rplidar_response_get_lidar_conf	rplidar_cmd.h	/^typedef struct _rplidar_response_get_lidar_conf{$/;"	s
type	rplidar_cmd.h	/^    _u32 type;$/;"	m	struct:_rplidar_response_get_lidar_conf
payload	rplidar_cmd.h	/^    _u8  payload[0];$/;"	m	struct:_rplidar_response_get_lidar_conf
rplidar_response_get_lidar_conf_t	rplidar_cmd.h	/^}__attribute__((packed)) rplidar_response_get_lidar_conf_t;$/;"	t	typeref:struct:_rplidar_response_get_lidar_conf
_rplidar_response_set_lidar_conf	rplidar_cmd.h	/^typedef struct _rplidar_response_set_lidar_conf{$/;"	s
result	rplidar_cmd.h	/^    _u32 result;$/;"	m	struct:_rplidar_response_set_lidar_conf
rplidar_response_set_lidar_conf_t	rplidar_cmd.h	/^}__attribute__((packed)) rplidar_response_set_lidar_conf_t;$/;"	t	typeref:struct:_rplidar_response_set_lidar_conf
_rplidar_response_device_info_t	rplidar_cmd.h	/^typedef struct _rplidar_response_device_info_t {$/;"	s
model	rplidar_cmd.h	/^    _u8   model;$/;"	m	struct:_rplidar_response_device_info_t
firmware_version	rplidar_cmd.h	/^    _u16  firmware_version;$/;"	m	struct:_rplidar_response_device_info_t
hardware_version	rplidar_cmd.h	/^    _u8   hardware_version;$/;"	m	struct:_rplidar_response_device_info_t
serialnum	rplidar_cmd.h	/^    _u8   serialnum[16];$/;"	m	struct:_rplidar_response_device_info_t
rplidar_response_device_info_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_info_t;$/;"	t	typeref:struct:_rplidar_response_device_info_t
_rplidar_response_device_health_t	rplidar_cmd.h	/^typedef struct _rplidar_response_device_health_t {$/;"	s
status	rplidar_cmd.h	/^    _u8   status;$/;"	m	struct:_rplidar_response_device_health_t
error_code	rplidar_cmd.h	/^    _u16  error_code;$/;"	m	struct:_rplidar_response_device_health_t
rplidar_response_device_health_t	rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_health_t;$/;"	t	typeref:struct:_rplidar_response_device_health_t
RPLIDAR_VARBITSCALE_X2_SRC_BIT	rplidar_cmd.h	265;"	d
RPLIDAR_VARBITSCALE_X4_SRC_BIT	rplidar_cmd.h	266;"	d
RPLIDAR_VARBITSCALE_X8_SRC_BIT	rplidar_cmd.h	267;"	d
RPLIDAR_VARBITSCALE_X16_SRC_BIT	rplidar_cmd.h	268;"	d
RPLIDAR_VARBITSCALE_X2_DEST_VAL	rplidar_cmd.h	270;"	d
RPLIDAR_VARBITSCALE_X4_DEST_VAL	rplidar_cmd.h	271;"	d
RPLIDAR_VARBITSCALE_X8_DEST_VAL	rplidar_cmd.h	272;"	d
RPLIDAR_VARBITSCALE_X16_DEST_VAL	rplidar_cmd.h	273;"	d
RPLIDAR_VARBITSCALE_GET_SRC_MAX_VAL_BY_BITS	rplidar_cmd.h	275;"	d
DEPRECATED	rplidar_driver.h	44;"	d
DEPRECATED	rplidar_driver.h	46;"	d
DEPRECATED	rplidar_driver.h	49;"	d
rp	rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
standalone	rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
rplidar	rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
RplidarScanMode	rplidar_driver.h	/^struct RplidarScanMode {$/;"	s	namespace:rp::standalone::rplidar
id	rplidar_driver.h	/^    _u16    id;$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
us_per_sample	rplidar_driver.h	/^    float   us_per_sample;   \/\/ microseconds per sample$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
max_distance	rplidar_driver.h	/^    float   max_distance;    \/\/ max distance$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
ans_type	rplidar_driver.h	/^    _u8     ans_type;         \/\/ the answer type of the scam mode, its value should be RPLIDAR_ANS_TYPE_MEASUREMENT*$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
scan_mode	rplidar_driver.h	/^    char    scan_mode[64];    \/\/ name of scan mode, max 63 characters$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
DRIVER_TYPE_SERIALPORT	rplidar_driver.h	/^    DRIVER_TYPE_SERIALPORT = 0x0,$/;"	e	enum:rp::standalone::rplidar::__anon1
DRIVER_TYPE_TCP	rplidar_driver.h	/^    DRIVER_TYPE_TCP = 0x1,$/;"	e	enum:rp::standalone::rplidar::__anon1
ChannelDevice	rplidar_driver.h	/^class ChannelDevice$/;"	c	namespace:rp::standalone::rplidar
bind	rplidar_driver.h	/^    virtual bool bind(const char*, uint32_t ) = 0;$/;"	p	class:rp::standalone::rplidar::ChannelDevice
open	rplidar_driver.h	/^    virtual bool open() {return true;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
close	rplidar_driver.h	/^    virtual void close() = 0;$/;"	p	class:rp::standalone::rplidar::ChannelDevice
flush	rplidar_driver.h	/^    virtual void flush() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
waitfordata	rplidar_driver.h	/^    virtual bool waitfordata(size_t data_count,_u32 timeout = -1, size_t * returned_size = NULL) = 0;$/;"	p	class:rp::standalone::rplidar::ChannelDevice
senddata	rplidar_driver.h	/^    virtual int senddata(const _u8 * data, size_t size) = 0;$/;"	p	class:rp::standalone::rplidar::ChannelDevice
recvdata	rplidar_driver.h	/^    virtual int recvdata(unsigned char * data, size_t size) = 0;$/;"	p	class:rp::standalone::rplidar::ChannelDevice
setDTR	rplidar_driver.h	/^    virtual void setDTR() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
clearDTR	rplidar_driver.h	/^    virtual void clearDTR() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
ReleaseRxTx	rplidar_driver.h	/^    virtual void ReleaseRxTx() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
RPlidarDriver	rplidar_driver.h	/^class RPlidarDriver {$/;"	c	namespace:rp::standalone::rplidar
DEFAULT_TIMEOUT	rplidar_driver.h	/^        DEFAULT_TIMEOUT = 2000, \/\/2000 ms$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon2
MAX_SCAN_NODES	rplidar_driver.h	/^        MAX_SCAN_NODES = 8192,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon3
LEGACY_SAMPLE_DURATION	rplidar_driver.h	/^        LEGACY_SAMPLE_DURATION = 476,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon4
CreateDriver	rplidar_driver.h	/^    static RPlidarDriver * CreateDriver(_u32 drivertype = DRIVER_TYPE_SERIALPORT);$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DisposeDriver	rplidar_driver.h	/^    static void DisposeDriver(RPlidarDriver * drv);$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
connect	rplidar_driver.h	/^    virtual u_result connect(const char *, _u32, _u32 flag = 0) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
disconnect	rplidar_driver.h	/^    virtual void disconnect() = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
isConnected	rplidar_driver.h	/^    virtual bool isConnected() = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
reset	rplidar_driver.h	/^    virtual u_result reset(_u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
getAllSupportedScanModes	rplidar_driver.h	/^    virtual u_result getAllSupportedScanModes(std::vector<RplidarScanMode>& outModes, _u32 timeoutInMs = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
getTypicalScanMode	rplidar_driver.h	/^    virtual u_result getTypicalScanMode(_u16& outMode, _u32 timeoutInMs = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
startScan	rplidar_driver.h	/^    virtual u_result startScan(bool force, bool useTypicalScan, _u32 options = 0, RplidarScanMode* outUsedScanMode = NULL) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
startScanExpress	rplidar_driver.h	/^    virtual u_result startScanExpress(bool force, _u16 scanMode, _u32 options = 0, RplidarScanMode* outUsedScanMode = NULL, _u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
getHealth	rplidar_driver.h	/^    virtual u_result getHealth(rplidar_response_device_health_t & health, _u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
getDeviceInfo	rplidar_driver.h	/^    virtual u_result getDeviceInfo(rplidar_response_device_info_t & info, _u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DEPRECATED	rplidar_driver.h	/^    DEPRECATED(virtual u_result getSampleDuration_uS(rplidar_response_sample_rate_t & rateInfo, _u32 timeout = DEFAULT_TIMEOUT)) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
setMotorPWM	rplidar_driver.h	/^    virtual u_result setMotorPWM(_u16 pwm) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
startMotor	rplidar_driver.h	/^    virtual u_result startMotor() = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
stopMotor	rplidar_driver.h	/^    virtual u_result stopMotor() = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
checkMotorCtrlSupport	rplidar_driver.h	/^    virtual u_result checkMotorCtrlSupport(bool & support, _u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DEPRECATED	rplidar_driver.h	/^    DEPRECATED(virtual u_result getFrequency(bool inExpressMode, size_t count, float & frequency, bool & is4kmode)) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
getFrequency	rplidar_driver.h	/^    virtual u_result getFrequency(const RplidarScanMode& scanMode, size_t count, float & frequency) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
startScanNormal	rplidar_driver.h	/^    virtual u_result startScanNormal(bool force, _u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DEPRECATED	rplidar_driver.h	/^    DEPRECATED(virtual u_result checkExpressScanSupported(bool & support, _u32 timeout = DEFAULT_TIMEOUT)) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
stop	rplidar_driver.h	/^    virtual u_result stop(_u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DEPRECATED	rplidar_driver.h	/^    DEPRECATED(virtual u_result grabScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout = DEFAULT_TIMEOUT)) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
grabScanDataHq	rplidar_driver.h	/^    virtual u_result grabScanDataHq(rplidar_response_measurement_node_hq_t * nodebuffer, size_t & count, _u32 timeout = DEFAULT_TIMEOUT) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DEPRECATED	rplidar_driver.h	/^    DEPRECATED(virtual u_result ascendScanData(rplidar_response_measurement_node_t * nodebuffer, size_t count)) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
ascendScanData	rplidar_driver.h	/^    virtual u_result ascendScanData(rplidar_response_measurement_node_hq_t * nodebuffer, size_t count) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
DEPRECATED	rplidar_driver.h	/^    DEPRECATED(virtual u_result getScanDataWithInterval(rplidar_response_measurement_node_t * nodebuffer, size_t & count)) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
getScanDataWithIntervalHq	rplidar_driver.h	/^    virtual u_result getScanDataWithIntervalHq(rplidar_response_measurement_node_hq_t * nodebuffer, size_t & count) = 0;$/;"	p	class:rp::standalone::rplidar::RPlidarDriver
~RPlidarDriver	rplidar_driver.h	/^    virtual ~RPlidarDriver() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
RPlidarDriver	rplidar_driver.h	/^    RPlidarDriver(){}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
_chanDev	rplidar_driver.h	/^    ChannelDevice* _chanDev;$/;"	m	class:rp::standalone::rplidar::RPlidarDriver
RPLIDAR_CMD_SYNC_BYTE	rplidar_protocol.h	39;"	d
RPLIDAR_CMDFLAG_HAS_PAYLOAD	rplidar_protocol.h	40;"	d
RPLIDAR_ANS_SYNC_BYTE1	rplidar_protocol.h	43;"	d
RPLIDAR_ANS_SYNC_BYTE2	rplidar_protocol.h	44;"	d
RPLIDAR_ANS_PKTFLAG_LOOP	rplidar_protocol.h	46;"	d
RPLIDAR_ANS_HEADER_SIZE_MASK	rplidar_protocol.h	48;"	d
RPLIDAR_ANS_HEADER_SUBTYPE_SHIFT	rplidar_protocol.h	49;"	d
_rplidar_cmd_packet_t	rplidar_protocol.h	/^typedef struct _rplidar_cmd_packet_t {$/;"	s
syncByte	rplidar_protocol.h	/^    _u8 syncByte; \/\/must be RPLIDAR_CMD_SYNC_BYTE$/;"	m	struct:_rplidar_cmd_packet_t
cmd_flag	rplidar_protocol.h	/^    _u8 cmd_flag; $/;"	m	struct:_rplidar_cmd_packet_t
size	rplidar_protocol.h	/^    _u8 size;$/;"	m	struct:_rplidar_cmd_packet_t
data	rplidar_protocol.h	/^    _u8 data[0];$/;"	m	struct:_rplidar_cmd_packet_t
rplidar_cmd_packet_t	rplidar_protocol.h	/^} __attribute__((packed)) rplidar_cmd_packet_t;$/;"	t	typeref:struct:_rplidar_cmd_packet_t
_rplidar_ans_header_t	rplidar_protocol.h	/^typedef struct _rplidar_ans_header_t {$/;"	s
syncByte1	rplidar_protocol.h	/^    _u8  syncByte1; \/\/ must be RPLIDAR_ANS_SYNC_BYTE1$/;"	m	struct:_rplidar_ans_header_t
syncByte2	rplidar_protocol.h	/^    _u8  syncByte2; \/\/ must be RPLIDAR_ANS_SYNC_BYTE2$/;"	m	struct:_rplidar_ans_header_t
size_q30_subtype	rplidar_protocol.h	/^    _u32 size_q30_subtype; \/\/ see _u32 size:30; _u32 subType:2;$/;"	m	struct:_rplidar_ans_header_t
type	rplidar_protocol.h	/^    _u8  type;$/;"	m	struct:_rplidar_ans_header_t
rplidar_ans_header_t	rplidar_protocol.h	/^} __attribute__((packed)) rplidar_ans_header_t;$/;"	t	typeref:struct:_rplidar_ans_header_t
int8_t	rptypes.h	/^typedef signed   char     int8_t;$/;"	t
uint8_t	rptypes.h	/^typedef unsigned char     uint8_t;$/;"	t
int16_t	rptypes.h	/^typedef __int16           int16_t;$/;"	t
uint16_t	rptypes.h	/^typedef unsigned __int16  uint16_t;$/;"	t
int32_t	rptypes.h	/^typedef __int32           int32_t;$/;"	t
uint32_t	rptypes.h	/^typedef unsigned __int32  uint32_t;$/;"	t
int64_t	rptypes.h	/^typedef __int64           int64_t;$/;"	t
uint64_t	rptypes.h	/^typedef unsigned __int64  uint64_t;$/;"	t
_s8	rptypes.h	/^typedef int8_t         _s8;$/;"	t
_u8	rptypes.h	/^typedef uint8_t        _u8;$/;"	t
_s16	rptypes.h	/^typedef int16_t        _s16;$/;"	t
_u16	rptypes.h	/^typedef uint16_t       _u16;$/;"	t
_s32	rptypes.h	/^typedef int32_t        _s32;$/;"	t
_u32	rptypes.h	/^typedef uint32_t       _u32;$/;"	t
_s64	rptypes.h	/^typedef int64_t        _s64;$/;"	t
_u64	rptypes.h	/^typedef uint64_t       _u64;$/;"	t
__small_endian	rptypes.h	74;"	d
__attribute__	rptypes.h	77;"	d
_word_size_t	rptypes.h	/^typedef _u8            _word_size_t;$/;"	t
THREAD_PROC	rptypes.h	84;"	d
_word_size_t	rptypes.h	/^typedef _u64           _word_size_t;$/;"	t
THREAD_PROC	rptypes.h	87;"	d
_word_size_t	rptypes.h	/^typedef _u32           _word_size_t;$/;"	t
THREAD_PROC	rptypes.h	90;"	d
_word_size_t	rptypes.h	/^typedef unsigned long  _word_size_t;$/;"	t
THREAD_PROC	rptypes.h	93;"	d
_word_size_t	rptypes.h	/^typedef _u32            _word_size_t;$/;"	t
THREAD_PROC	rptypes.h	96;"	d
u_result	rptypes.h	/^typedef uint32_t u_result;$/;"	t
RESULT_OK	rptypes.h	102;"	d
RESULT_FAIL_BIT	rptypes.h	103;"	d
RESULT_ALREADY_DONE	rptypes.h	104;"	d
RESULT_INVALID_DATA	rptypes.h	105;"	d
RESULT_OPERATION_FAIL	rptypes.h	106;"	d
RESULT_OPERATION_TIMEOUT	rptypes.h	107;"	d
RESULT_OPERATION_STOP	rptypes.h	108;"	d
RESULT_OPERATION_NOT_SUPPORT	rptypes.h	109;"	d
RESULT_FORMAT_NOT_SUPPORT	rptypes.h	110;"	d
RESULT_INSUFFICIENT_MEMORY	rptypes.h	111;"	d
IS_OK	rptypes.h	113;"	d
IS_FAIL	rptypes.h	114;"	d
thread_proc_t	rptypes.h	/^typedef _word_size_t (THREAD_PROC * thread_proc_t ) ( void * );$/;"	t
